/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-09-29 08:05:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views._17_005fchat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _01_005fchatTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("    <link href=\"/sample/resources/css/style.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\">\r\n");
      out.write("    <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n");
      out.write("    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css\" type=\"text/css\" rel=\"stylesheet\">\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("    \t$(function(){\r\n");
      out.write("    \t\t$('#btnMsg').on('click', function(){\r\n");
      out.write("    \t\t\tvar msg = $('#txtMsg').val();\r\n");
      out.write("    \t\t\tvar date = getToday();\r\n");
      out.write("\t\t\t\tvar appendMsg = '<div class=\"outgoing_msg\"> ' + \r\n");
      out.write("                \t\t\t\t'<div class=\"sent_msg\"> ' +\r\n");
      out.write("                \t\t\t\t'<p>' + msg + '</p> ' +\r\n");
      out.write("                \t\t\t\t'<span class=\"time_date\"> '+ date +'</span> </div> ' +\r\n");
      out.write("            \t\t\t\t\t'</div> ';    \r\n");
      out.write("            \t\r\n");
      out.write("\t\t\t\t$('#divHistory').append(appendMsg);\r\n");
      out.write("    \t\t\t$('#divHistory').scrollTop($('#divHistory').height());\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t$.ajax({\r\n");
      out.write("    \t\t\t\ttype:'post',\r\n");
      out.write("    \t\t\t\tcontentType:'application/json',\r\n");
      out.write("    \t\t\t\turl : '/sample/chat/sendMsg',\r\n");
      out.write("    \t\t\t\tdata : JSON.stringify({msg:msg}), //json문자열 표기법으로 변환\r\n");
      out.write("    \t\t\t\tdataType : 'text',  //결과값의 타입\r\n");
      out.write("    \t\t\t\tsuccess : function(result){\r\n");
      out.write("    \t\t\t\t\tconsole.log(result);\r\n");
      out.write("    \t\t\t\t\treceiveMsgAppend(result);\r\n");
      out.write("    \t\t\t\t},\r\n");
      out.write("    \t\t\t\terror:function(result){\r\n");
      out.write("    \t\t\t\t\talert(\"error\");\r\n");
      out.write("    \t\t\t\t\tconsole.log(result);\r\n");
      out.write("    \t\t\t\t}\r\n");
      out.write("    \t\t\t});\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t//받은메시지 추가\r\n");
      out.write("    \t\t\tfunction receiveMsgAppend(msg){\r\n");
      out.write("        \t\t\tvar date = getToday();\r\n");
      out.write("    \t\t\t\tvar appendMsg = '<div class=\"incoming_msg\"> ' +\r\n");
      out.write("            \t                    '<div class=\"incoming_msg_img\"> <img src=\"/sample/resources/images/lion.png\" alt=\"sunil\"> </div> ' +\r\n");
      out.write("            \t                    '<div class=\"received_msg\"> ' +\r\n");
      out.write("            \t                    '<div class=\"received_withd_msg\"> ' +\r\n");
      out.write("            \t                    '    <p>' + msg + '</p> ' +\r\n");
      out.write("            \t                    '    <span class=\"time_date\"> '+ date +'</span></div> ' +\r\n");
      out.write("            \t                    '</div> ' +\r\n");
      out.write("            \t                \t'</div>';\r\n");
      out.write("            \t                \r\n");
      out.write("    \t\t\t\t$('#divHistory').append(appendMsg);\r\n");
      out.write("        \t\t\t$('#divHistory').scrollTop($('#divHistory').height());    \t\t\t\t\r\n");
      out.write("    \t\t\t}\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\t//시스템 날짜 구하기\r\n");
      out.write("    \t\t\tfunction getToday(){\r\n");
      out.write("    \t\t\t\tvar date = new Date();\r\n");
      out.write("    \t\t\t\treturn date.getFullYear() + \"-\" + \r\n");
      out.write("    \t\t\t\t\t\t(\"0\" + (date.getMonth() + 1)).slice(-2) + \"-\" + (\"0\" + (date.getDate() + 1)).slice(-2) +  ' | ' +\r\n");
      out.write("    \t\t\t\t\t\tdate.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n");
      out.write("    \t\t\t}\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t});\r\n");
      out.write("    \t});\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <div class=\"container\">\r\n");
      out.write("        <h3 class=\" text-center\">Messaging</h3>\r\n");
      out.write("        <div class=\"messaging\">\r\n");
      out.write("            <div class=\"mesgs\">\r\n");
      out.write("                <div id = \"divHistory\" class=\"msg_history\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"type_msg\">\r\n");
      out.write("                <div class=\"input_msg_write\">\r\n");
      out.write("                    <input id=\"txtMsg\" type=\"text\" class=\"write_msg\" placeholder=\"Type a message\" />\r\n");
      out.write("                    <button id=\"btnMsg\" class=\"msg_send_btn\" type=\"button\"><i class=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i></button>\r\n");
      out.write("                </div>\r\n");
      out.write("            \t</div>\r\n");
      out.write("       \t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("  \t</div>  \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
