package com.myboard.controller;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myboard.dto.MemberDTO;
import com.myboard.service.MemberService;

@Controller
@RequestMapping("/member")
@SessionAttributes("pdto")
public class MemberController {

	@Resource
	private MemberService mservice;
	
	// 회원가입 폼으로 이동
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String join() throws Exception {
		return "member/join";
	}
	
	// 회원가입 db에 저장 후 login.jsp로 이동
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String join(MemberDTO mdto, MultipartFile photofile,
			RedirectAttributes attributes) throws Exception {
		logger.info("join mdto : "+mdto);
		logger.info("join photofile : "+photofile);
		Map<String, Object> map = mservice.insert(mdto,photofile);
		
		attributes.addFlashAttribute("msg",map.get("msg"));
		if((int)map.get("result") == 0) {
			return "redirect:/member/login";
		}

		return "redirect:/member/join";
	}
	
	// 로그인 폼으로 이동
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "member/login";
	}
	
	// 로그인
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(String userid, String passwd,
			RedirectAttributes redirectAttributes,
			HttpSession httpSession) throws Exception {
		logger.debug("login id/pw : "+userid+"/"+passwd);
		Map<String, Object> map = mservice.loginCheck(userid,passwd);
		redirectAttributes.addFlashAttribute("msg",map.get("msg"));
		redirectAttributes.addFlashAttribute("userid",userid);

		// 로그인 성공한 경우
		if((int)map.get("result") == 0) {
			httpSession.setAttribute("userid", userid);
			httpSession.setMaxInactiveInterval(60*60);
			return "redirect:/board/list";
		} 
		
		// 로그인 실패
		return "redirect:/member/login";
	}
	
	// 마이페이지 폼으로 이동
	@RequestMapping(value ="/modify", method = RequestMethod.GET)
	public String modify(@ModelAttribute("userid") String userid,
			@ModelAttribute("msg") String msg, Model model) throws Exception {
		MemberDTO dto = mservice.modify(userid);
		model.addAttribute("dto",dto);
		model.addAttribute("msg",msg);
		return "member/modify";
	}
	
	// 회원정보 수정
	@RequestMapping(value ="/modify", method = RequestMethod.POST)
	public String modify(MemberDTO mdto, MultipartFile photofile,
			RedirectAttributes attributes) throws Exception {
		
		logger.debug("modify mdto : "+mdto);
		logger.debug("modify photofile : "+photofile);
		String msg = mservice.update(mdto,photofile);
		
		logger.debug("modify mdto : "+mdto);
		logger.debug("modify msg : "+msg);
		attributes.addFlashAttribute("msg",msg);
		attributes.addFlashAttribute("userid",mdto.getUserid());
		return "redirect:/member/modify";
	}
	
	// 비밀번호 확인화면으로 이동
	@RequestMapping(value = "/checkPW", method = RequestMethod.GET)
	public String checkPW(@ModelAttribute("msg") String msg
			,Model model) throws Exception {
		model.addAttribute("msg",msg);
		return "member/checkPW";
	}
	
	// 비밀번호 일치여부 확인
	@RequestMapping(value = "/checkPW", method = RequestMethod.POST)
	public String checkPW(String passwd, String insertPW,
			RedirectAttributes attributes) throws Exception {
		
		String msg = null;
		logger.info(passwd);
		logger.info(insertPW);
		boolean b = mservice.checkPW(passwd,insertPW);
		logger.info("b : "+b);
		if(b) {
			msg = "비밀번호 일치";
		} else {
			msg = "비밀번호 불일치";
		}
		
		attributes.addFlashAttribute("msg",msg);
		
		return "redirect:/member/checkPW";
	}
	
	// 비밀번호 변경화면으로 이동
	@RequestMapping("/moveChangePW")
	public String moveChangePW(MemberDTO dto,Model model) throws Exception {
		model.addAttribute("dto",dto);
		return "member/changePW";
	}
	
	// 비밀번호 변경
	@RequestMapping("/changePW")
	public String changePW(MemberDTO dto, String oldPW, String newPW,
			RedirectAttributes attributes) throws Exception {
		logger.debug("changePW userid : "+dto.getUserid());
		logger.debug("changePW passwd : "+dto.getPasswd());
		logger.debug("changePW oldPW : "+oldPW);
		logger.debug("changePW newPW : "+newPW);
		String msg = mservice.changePW(dto,oldPW,newPW);
		logger.debug("changePW msg : "+msg);
		attributes.addFlashAttribute("msg",msg);
		attributes.addFlashAttribute("userid",dto.getUserid());
		return "redirect:/member/modify";
	}
	
	// 삭제비밀번호 확인화면으로 이동
	@RequestMapping("/deletePW")
	public String deletePW(MemberDTO dto,Model model) {
		model.addAttribute("dto",dto);
		return "member/deletePW";
	}
	
	// 회원 탈퇴
	@RequestMapping("/delete")
	public String delete(MemberDTO dto, String insertPW,
			RedirectAttributes attributes) throws Exception {
		logger.debug("delete dto : "+dto);
		logger.debug("delete insertPW : "+insertPW);
		String msg = mservice.delete(dto,insertPW);
		attributes.addFlashAttribute("msg",msg);
		
		if(msg =="비밀번호가 일치하지 않습니다.") {
			attributes.addFlashAttribute("userid",dto.getUserid());
			return "redirect:/member/modify";
		} 
		
		return "redirect:/board/";
	}
}
